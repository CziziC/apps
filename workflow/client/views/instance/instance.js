// Generated by CoffeeScript 1.10.0
var formId;

formId = 'instanceform';

Template.instanceform.helpers({
  instanceId: function() {
    return 'instanceform';
  },
  form_types: function() {
    if (ApproveManager.isReadOnly()) {
      return 'disabled';
    } else {
      return 'method';
    }
  },
  steedos_form: function() {
    var form_version;
    form_version = WorkflowManager.getInstanceFormVersion();
    if (form_version) {
      return form_version;
    }
  },
  innersubformContext: function(obj) {
    var doc_values;
    doc_values = WorkflowManager_format.getAutoformSchemaValues();
    obj["tableValues"] = doc_values ? doc_values[obj.code] : [];
    obj["formId"] = formId;
    return obj;
  },
  instance: function() {
    var steedos_instance;
    steedos_instance = WorkflowManager.getInstance();
    return steedos_instance;
  },
  equals: function(a, b) {
    return a === b;
  },
  includes: function(a, b) {
    return b.split(',').includes(a);
  },
  fields: function() {
    var form_version;
    form_version = WorkflowManager.getInstanceFormVersion();
    if (form_version) {
      return new SimpleSchema(WorkflowManager_format.getAutoformSchema(form_version));
    }
  },
  doc_values: function() {
    return WorkflowManager_format.getAutoformSchemaValues();
  },
  currentStep: function() {
    return InstanceManager.getCurrentStep();
  },
  currentApprove: function() {
    return InstanceManager.getCurrentApprove();
  },
  init_formScripts: function() {
    var form_version;
    form_version = WorkflowManager.getInstanceFormVersion();
    if (form_version) {
      return Form_formula.initFormScripts(form_version.form_script);
    }
  },
  init_nextStepsOptions: function() {
    var autoFormDoc, currentApprove, currentStep, form_version, i, instance, judge, len, nextStep, nextStepId, nextStepUsers, nextSteps, u_op, u_ops;
    console.log("run init_nextStepsOptions...");
    if (ApproveManager.isReadOnly()) {
      return;
    }
    $("#nextSteps").select2();
    $("#nextStepUsers").select2();
    $("#ins_applicant").select2();
    currentApprove = InstanceManager.getCurrentApprove();
    if (!currentApprove) {
      return;
    }
    if (currentApprove.next_steps.length < 1) {
      return;
    }
    judge = currentApprove.judge;
    instance = WorkflowManager.getInstance();
    currentStep = InstanceManager.getCurrentStep();
    form_version = WorkflowManager.getInstanceFormVersion();
    if (!form_version) {
      return;
    }
    autoFormDoc = AutoForm.getFormValues("instanceform").insertDoc;
    nextSteps = ApproveManager.getNextSteps(instance, currentStep, judge, autoFormDoc, form_version.fields);
    if (!nextSteps) {
      return;
    }
    ApproveManager.updateNextStepOptions(nextSteps, judge);
    nextStepId = currentApprove.next_steps[0].step;
    if (nextSteps.filterProperty('id', nextStepId).length > 0) {
      if ($("#nextSteps").get(0)) {
        $("#nextSteps").get(0).value = nextStepId;
      }
    } else {
      return;
    }
    nextStepUsers = ApproveManager.getNextStepUsers(instance, nextStepId);
    nextStep = WorkflowManager.getInstanceStep(nextStepId);
    ApproveManager.updateNextStepUsersOptions(nextStep, nextStepUsers);
    u_ops = $("#nextStepUsers option").toArray();
    if (u_ops.length > 0) {
      if ($("#nextStepUsers").get(0)) {
        $("#nextStepUsers").get(0).selectedIndex = -1;
      }
    }
    for (i = 0, len = u_ops.length; i < len; i++) {
      u_op = u_ops[i];
      if (currentApprove.next_steps[0].users.includes(u_op.value)) {
        u_op.selected = true;
      }
    }
    $("#ins_applicant").select2().val(instance.applicant);
    return $("#ins_applicant").select2().val();
  },
  show_suggestion: function() {
    return !ApproveManager.isReadOnly();
  },
  enabled_submit: function() {
    var flow, ins;
    ins = WorkflowManager.getInstance();
    if (!ins) {
      return;
    }
    flow = db.flows.findOne(ins.flow);
    if (!flow) {
      return;
    }
    if ((Session.get("box") === "draft" && flow.state === "enabled") || Session.get("box") === "inbox") {
      return "";
    } else {
      return "display: none;";
    }
  },
  enabled_save: function() {
    var flow, ins;
    ins = WorkflowManager.getInstance();
    if (!ins) {
      return;
    }
    flow = db.flows.findOne(ins.flow);
    if (!flow) {
      return;
    }
    if ((Session.get("box") === "draft" && flow.state === "enabled") || Session.get("box") === "inbox") {
      return "";
    } else {
      return "display: none;";
    }
  },
  enabled_delete: function() {
    var ins, space;
    ins = WorkflowManager.getInstance();
    if (!ins) {
      return;
    }
    space = db.spaces.findOne(ins.space);
    if (!space) {
      return;
    }
    if (Session.get("box") === "draft" || (Session.get("box") === "monitor" && space.admins.contains(Meteor.userId()))) {
      return "";
    } else {
      return "display: none;";
    }
  },
  enabled_print: function() {
    if (Meteor.isCordova) {
      return "display: none;";
    } else {
      return "";
    }
  },
  enabled_add_attachment: function() {
    if (Session.get("box") === "draft" || Session.get("box") === "inbox") {
      return "";
    } else {
      return "display: none;";
    }
  },
  enabled_terminate: function() {
    var ins;
    ins = WorkflowManager.getInstance();
    if (!ins) {
      return;
    }
    if ((Session.get("box") === "pending" || Session.get("box") === "inbox") && ins.state === "pending" && ins.applicant === Meteor.userId()) {
      return "";
    } else {
      return "display: none;";
    }
  },
  enabled_reassign: function() {
    var ins, space;
    ins = WorkflowManager.getInstance();
    if (!ins) {
      return;
    }
    space = db.spaces.findOne(ins.space);
    if (!space) {
      return;
    }
    if (Session.get("box") === "monitor" && ins.state === "pending" && space.admins.contains(Meteor.userId())) {
      return "";
    } else {
      return "display: none;";
    }
  },
  enabled_relocate: function() {
    var ins, space;
    ins = WorkflowManager.getInstance();
    if (!ins) {
      return;
    }
    space = db.spaces.findOne(ins.space);
    if (!space) {
      return;
    }
    if (Session.get("box") === "monitor" && ins.state === "pending" && space.admins.contains(Meteor.userId())) {
      return "";
    } else {
      return "display: none;";
    }
  },
  space_users: function() {
    return db.space_users.find();
  }
});

Template.instanceform.events({
  'change .suggestion,.form-control': function(event) {
    var autoFormDoc, currentStep, form_version, instance, judge, nextStep, nextStepId, nextStepUsers, nextSteps;
    if (ApproveManager.isReadOnly()) {
      return;
    }
    judge = $("[name='judge']").filter(':checked').val();
    instance = WorkflowManager.getInstance();
    currentStep = InstanceManager.getCurrentStep();
    form_version = WorkflowManager.getInstanceFormVersion();
    if (!form_version) {
      return;
    }
    autoFormDoc = AutoForm.getFormValues("instanceform").insertDoc;
    nextSteps = ApproveManager.getNextSteps(instance, currentStep, judge, autoFormDoc, form_version.fields);
    if (!nextSteps) {
      $("#nextSteps").empty();
      $("#nextStepUsers").empty();
      return;
    }
    ApproveManager.updateNextStepOptions(nextSteps, judge);
    if (nextSteps.length === 1 || judge === "rejected") {
      nextStepId = ApproveManager.getNextStepsSelectValue();
      nextStepUsers = ApproveManager.getNextStepUsers(instance, nextStepId);
      nextStep = WorkflowManager.getInstanceStep(nextStepId);
      ApproveManager.updateNextStepUsersOptions(nextStep, nextStepUsers);
    } else {
      $("#nextStepUsers").empty();
    }
    InstanceManager.checkSuggestion();
    InstanceManager.checkNextStep();
    return InstanceManager.checkNextStepUser();
  },
  'change #suggestion': function(event) {
    if (ApproveManager.isReadOnly()) {
      return;
    }
    return InstanceManager.checkSuggestion();
  },
  'change #nextSteps': function(event) {
    var instance, nextStep, nextStepId, nextStepUsers;
    if (ApproveManager.isReadOnly()) {
      return;
    }
    instance = WorkflowManager.getInstance();
    nextStepId = ApproveManager.getNextStepsSelectValue();
    nextStep = WorkflowManager.getInstanceStep(nextStepId);
    nextStepUsers = ApproveManager.getNextStepUsers(instance, nextStepId);
    ApproveManager.updateNextStepUsersOptions(nextStep, nextStepUsers);
    InstanceManager.checkNextStep();
    return InstanceManager.checkNextStepUser();
  },
  'change #nextStepUsers': function(event) {
    if (ApproveManager.isReadOnly()) {
      return;
    }
    return InstanceManager.checkNextStepUser();
  },
  'change .form-control': function(event) {
    var code, form_version, formula_fields;
    if (ApproveManager.isReadOnly()) {
      return;
    }
    code = event.target.name;
    console.log("instanceform form-control change, code is " + code);
    InstanceManager.checkFormFieldValue(event.target);
    form_version = WorkflowManager.getInstanceFormVersion();
    formula_fields = [];
    if (form_version) {
      formula_fields = Form_formula.getFormulaFieldVariable("Form_formula.field_values", form_version.fields);
    }
    return Form_formula.run(code, "", formula_fields, AutoForm.getFormValues("instanceform").insertDoc, form_version.fields);
  },
  'click #instance_to_print': function(event) {
    return UUflow_api.print($("#instanceId").val());
  },
  'click #instance_update': function(event) {
    return InstanceManager.saveIns();
  },
  'click #instance_remove': function(event) {
    return InstanceManager.deleteIns();
  },
  'click #instance_submit': function(event) {
    InstanceManager.checkFormValue();
    if ($(".has-error").length === 0) {
      return InstanceManager.submitIns();
    }
  },
  'click .remove-steedos-table-row': function(event, template) {
    var code, form_version, formula_fields;
    console.log("instanceform form-control change");
    code = event.target.name;
    form_version = WorkflowManager.getInstanceFormVersion();
    formula_fields = [];
    if (form_version) {
      formula_fields = Form_formula.getFormulaFieldVariable("Form_formula.field_values", form_version.fields);
    }
    return setTimeout(function() {
      console.log(JSON.stringify(AutoForm.getFormValues("instanceform").insertDoc));
      return Form_formula.run(code, "", formula_fields, AutoForm.getFormValues("instanceform").insertDoc, form_version.fields);
    }, 101);
  },
  'change .ins-file-input': function(event, template) {
    return FS.Utility.eachFile(event, function(file) {
      var currentApprove, newFile;
      newFile = new FS.File(file);
      currentApprove = InstanceManager.getCurrentApprove();
      newFile.metadata = {
        owner: Meteor.userId(),
        space: Session.get("spaceId"),
        instance: Session.get("instanceId"),
        approve: currentApprove.id
      };
      return cfs.instances.insert(newFile, function(err, fileObj) {
        if (err) {
          return toastr.error(err);
        } else {
          Session.set("progress_file_id", fileObj._id);
          return fileObj.on("uploaded", function() {
            InstanceManager.addAttach(fileObj);
            return fileObj.removeListener("uploaded");
          });
        }
      });
    });
  }
});
